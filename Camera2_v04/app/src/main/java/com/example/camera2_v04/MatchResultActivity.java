package com.example.camera2_v04;

import androidx.appcompat.app.AppCompatActivity;

import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import java.io.FileNotFoundException;

public class MatchResultActivity extends AppCompatActivity {

    private float[] new_face_embedding;
    private double person_distance;
    private PersonFile[] personArray;
    private String[] match_names;
    private int index_match;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_match_result);

        ListView listView = (ListView) findViewById(R.id.resultListView);

        match_names = new String[2];
        match_names[0] = "Ningu√©m encontrado";
        match_names[1] = "";

        // Get generated embedding from face
        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            new_face_embedding = extras.getFloatArray("vector_embedding");
        }

        // Create some local examples
        personArray = new PersonFile[2];
        personArray[0] = new PersonFile("Alexandre Ciuffatelli", new float[]{
                0.02445f, 0.06945f, 0.10397f, -0.03266f, 0.00765f, 0.02254f, -0.04376f, -0.04091f, -0.00971f, -0.04160f, 0.02689f, -0.03694f, 0.03674f, 0.03719f, 0.00765f, -0.00565f, -0.05067f, 0.01727f, -0.06345f, -0.00099f, 0.00362f, -0.02516f, 0.01938f, 0.07532f, 0.05133f, -0.01650f, -0.01711f, 0.01062f, 0.00634f, -0.05179f, 0.01781f, 0.00837f, -0.00145f, 0.02527f, 0.07811f, 0.14274f, 0.06681f, 0.03207f, -0.03480f, -0.00078f, 0.05804f, 0.00822f, 0.03461f, -0.06377f, -0.01850f, -0.02238f, -0.01306f, 0.03595f, 0.00229f, -0.01142f, 0.01678f, -0.03515f, -0.02136f, 0.05294f, 0.08354f, 0.01137f, -0.00524f, 0.00194f, 0.05151f, -0.02612f, 0.06709f, -0.03541f, 0.04646f, -0.00749f, 0.06474f, -0.06318f, 0.03325f, 0.06432f, 0.05168f, 0.10486f, 0.03987f, 0.02295f, -0.05940f, -0.01810f, 0.07675f, -0.09205f, -0.05658f, 0.11702f, 0.01740f, -0.00951f, 0.05358f, 0.03694f, -0.01138f, 0.01330f, -0.02084f, 0.03464f, 0.07219f, 0.01707f, 0.03769f, 0.04506f, 0.02542f, 0.05805f, -0.06748f, -0.00546f, -0.02458f, -0.05358f, 0.05192f, 0.00886f, 0.02093f, -0.03036f, -0.00177f, -0.00450f, -0.08469f, -0.02864f, -0.04436f, 0.02770f, 0.06162f, 0.01464f, 0.00298f, 0.08068f, -0.02671f, 0.02296f, 0.07598f, 0.03413f, 0.01748f, 0.01107f, 0.02752f, -0.05048f, -0.05749f, -0.04030f, -0.02676f, 0.01637f, -0.04609f, -0.00825f, -0.00091f, 0.06717f, -0.02085f, 0.00440f, -0.02648f, 0.04449f, 0.05230f, -0.00094f, -0.03868f, -0.00137f, 0.05859f, -0.00518f, 0.02051f, 0.03656f, -0.07653f, -0.05256f, 0.03305f, -0.07772f, 0.06825f, -0.01066f, -0.03870f, -0.00246f, 0.02292f, 0.03643f, 0.01565f, -0.08979f, 0.00120f, -0.07663f, -0.03081f, -0.00405f, -0.06134f, -0.00459f, -0.03627f, -0.01802f, -0.02623f, -0.00825f, -0.08512f, 0.01984f, 0.02784f, -0.01582f, -0.05986f, -0.05377f, -0.06514f, -0.02389f, 0.00353f, -0.04118f, -0.01907f, -0.09037f, -0.04039f, 0.03930f, 0.06641f, 0.02023f, 0.04567f, 0.04828f, -0.06644f, -0.01127f, -0.03371f, 0.01139f, 0.01757f, -0.00957f, 0.05166f, 0.00847f, 0.01886f, 0.01321f, 0.01266f, 0.00873f, -0.01024f, 0.03586f, -0.02163f, -0.00007f, -0.05329f, -0.00253f, -0.06093f, -0.03083f, 0.02957f, 0.00692f, -0.04380f, -0.00334f, 0.00137f, 0.07259f, 0.03016f, -0.06758f, -0.04885f, 0.05471f, 0.01479f, -0.01982f, -0.07374f, -0.04463f, 0.00054f, 0.00596f, -0.00929f, 0.03764f, 0.05115f, 0.03025f, -0.00625f, 0.01186f, -0.03549f, 0.00102f, -0.07812f, 0.03471f, -0.03983f, 0.04674f, -0.04791f, 0.04870f, -0.02640f, -0.07000f, -0.00448f, 0.00972f, 0.03079f, -0.00494f, 0.10323f, -0.04474f, -0.04783f, 0.04741f, 0.04141f, 0.01116f, -0.06065f, 0.03974f, 0.01722f, 0.00807f, 0.03305f, -0.05482f, 0.05871f, -0.03464f, 0.01123f, 0.02155f, 0.04186f, -0.06226f, -0.05842f, -0.01180f, 0.01046f, -0.01251f, -0.00046f, 0.02561f, -0.03674f, 0.06037f, -0.00014f, -0.05104f, 0.00525f, -0.08131f, -0.01045f, -0.10177f, 0.00247f, 0.11198f, 0.06006f, 0.04014f, 0.05060f, -0.01435f, -0.01978f, -0.01269f, -0.00978f, -0.05874f, 0.02362f, -0.00517f, 0.05181f, 0.00758f, -0.03510f, -0.04912f, -0.00235f, 0.03122f, 0.06178f, -0.01299f, -0.00121f, -0.00411f, 0.01252f, -0.04192f, 0.01249f, 0.03196f, 0.00018f, 0.00136f, 0.05091f, 0.01807f, 0.03858f, 0.08189f, -0.04654f, -0.05763f, 0.01509f, -0.00526f, -0.02849f, 0.05498f, 0.06951f, -0.02242f, 0.01734f, -0.02429f, 0.05256f, 0.05174f, 0.02735f, 0.01060f, 0.00696f, 0.11491f, 0.05261f, 0.00366f, 0.01938f, -0.01440f, -0.07873f, 0.02276f, -0.00615f, -0.05590f, 0.01548f, 0.03301f, -0.04286f, 0.02648f, -0.05356f, 0.03015f, 0.04827f, -0.02466f, -0.01286f, -0.06712f, 0.04888f, -0.11789f, 0.03815f, -0.00059f, 0.01616f, 0.06617f, -0.02239f, 0.04815f, -0.06714f, -0.02381f, -0.09383f, -0.02467f, 0.08240f, 0.04012f, -0.04318f, 0.06898f, 0.06292f, -0.02185f, 0.05174f, -0.02227f, 0.00476f, 0.08571f, -0.03720f, -0.01422f, -0.06114f, -0.00418f, 0.06150f, 0.03686f, 0.01507f, -0.01843f, -0.01098f, -0.04484f, -0.06852f, -0.01149f, -0.00820f, 0.01882f, 0.02653f, -0.00306f, 0.00618f, -0.03726f, -0.04240f, -0.02070f, 0.02965f, 0.01312f, 0.05148f, -0.05612f, 0.02863f, 0.07741f, 0.06807f, 0.01817f, -0.00328f, 0.00488f, 0.01708f, -0.03769f, -0.06882f, 0.03049f, 0.04743f, 0.03324f, -0.07092f, 0.02233f, 0.01977f, 0.04547f, -0.08763f, -0.04993f, 0.00941f, 0.00847f, 0.00510f, 0.05811f, -0.01384f, 0.04083f, 0.05456f, -0.08145f, 0.07038f, -0.01996f, 0.00792f, -0.00857f, 0.05277f, 0.07188f, 0.03391f, 0.02174f, -0.00873f, 0.05333f, 0.00859f, -0.08281f, -0.03233f, -0.01637f, -0.01456f, -0.02035f, -0.02318f, -0.01238f, -0.08280f, -0.00666f, 0.00929f, 0.03539f, 0.04169f, -0.06805f, -0.07195f, 0.00332f, 0.03961f, 0.05299f, -0.03245f, -0.03486f, 0.03087f, 0.08104f, -0.04921f, 0.00073f, -0.03437f, -0.01805f, 0.06284f, -0.02891f, 0.01501f, -0.03527f, -0.00630f, -0.03397f, -0.05647f, 0.07353f, 0.03501f, 0.05683f, 0.03247f, -0.08458f, -0.00762f, 0.02746f, 0.03647f, 0.07510f, -0.01162f, -0.02134f, -0.00161f, -0.07893f, -0.05937f, -0.01609f, 0.01192f, 0.04780f, -0.00854f, -0.02654f, 0.05650f, -0.01693f, -0.07811f, 0.07786f, 0.00882f, -0.04420f, -0.06349f, -0.01767f, 0.00399f, 0.00068f, 0.03233f, 0.02163f, -0.03176f, -0.01773f, 0.05415f, 0.03188f, -0.04406f, -0.02963f, -0.06339f, -0.04123f, 0.13650f, 0.01179f, 0.03026f, 0.00644f, -0.04205f, 0.00987f, 0.02068f, 0.04410f, -0.04582f, -0.00917f, -0.09135f, 0.09576f, -0.03711f, 0.00688f, -0.00130f, -0.03230f, 0.04808f, -0.07317f, 0.00055f, -0.08705f, -0.03131f, -0.01465f, 0.04377f, -0.00999f, 0.07802f, 0.06362f
        });
        personArray[1] = new PersonFile("Brad Pitt", new float[]{
                0.02884f, 0.01993f, -0.00736f, -0.04338f, 0.00022f, 0.00318f, 0.01961f, -0.00359f, -0.05021f, -0.00165f, 0.03113f, -0.00927f, -0.00625f, -0.02603f, 0.05879f, 0.04900f, 0.06201f, -0.04003f, 0.02943f, 0.01130f, 0.02063f, 0.01772f, 0.00632f, 0.08393f, 0.05378f, -0.03953f, -0.04109f, 0.02518f, 0.02911f, 0.07313f, -0.04173f, -0.04738f, -0.03667f, -0.01990f, 0.05441f, -0.02558f, 0.04490f, -0.03970f, 0.08077f, -0.03379f, 0.02186f, 0.06270f, 0.03135f, 0.00298f, -0.04477f, -0.01237f, -0.01102f, -0.03009f, 0.00501f, 0.05737f, -0.03013f, -0.04029f, -0.01090f, -0.01587f, 0.07338f, -0.02928f, -0.01585f, -0.01760f, 0.01433f, 0.10377f, 0.04626f, 0.03501f, 0.00088f, -0.01569f, 0.03402f, -0.01198f, 0.06832f, 0.00114f, 0.06623f, 0.00144f, 0.00458f, -0.02227f, 0.01763f, 0.03448f, -0.02363f, 0.04443f, 0.06997f, 0.03910f, 0.08645f, 0.06327f, -0.00158f, -0.04535f, -0.09182f, 0.05614f, 0.06235f, -0.09538f, -0.04034f, 0.05733f, 0.00625f, -0.06569f, 0.01424f, -0.01928f, -0.01832f, 0.04047f, -0.06128f, -0.08782f, -0.04038f, -0.01893f, 0.03945f, 0.04596f, -0.08523f, 0.02052f, -0.03828f, -0.01077f, 0.04675f, 0.02419f, -0.02955f, 0.01854f, 0.08350f, -0.00053f, -0.01786f, -0.03257f, 0.03928f, -0.00191f, -0.00494f, 0.02092f, 0.01120f, -0.03533f, -0.02153f, -0.03590f, 0.02409f, 0.04585f, 0.05177f, -0.00724f, 0.06440f, 0.10020f, -0.03405f, -0.03489f, 0.04302f, 0.12780f, -0.03792f, 0.00184f, 0.02244f, -0.00339f, -0.02999f, -0.01325f, -0.00445f, 0.04055f, 0.07421f, -0.05891f, -0.00703f, -0.09794f, 0.07042f, -0.06162f, -0.08064f, -0.01033f, -0.07258f, -0.04127f, 0.03163f, -0.05557f, -0.01519f, -0.07091f, 0.04316f, 0.01317f, -0.02499f, -0.06025f, 0.00485f, -0.00262f, -0.07139f, 0.01759f, -0.02672f, -0.04372f, 0.00894f, -0.02700f, 0.08947f, 0.01567f, 0.03219f, 0.06278f, 0.00566f, -0.01880f, -0.01755f, -0.04008f, -0.01995f, -0.00106f, -0.00967f, -0.04395f, 0.10678f, 0.05153f, 0.06194f, -0.00434f, -0.04490f, -0.01903f, 0.06826f, -0.07293f, -0.07816f, -0.06160f, -0.00564f, -0.05625f, -0.09301f, -0.00359f, -0.04508f, -0.02764f, 0.04304f, 0.00695f, -0.00414f, 0.03683f, 0.03351f, 0.02582f, 0.03006f, 0.03899f, 0.00004f, 0.03040f, 0.09033f, -0.05137f, -0.01699f, 0.00792f, -0.03930f, 0.01023f, -0.05744f, 0.02822f, -0.03060f, 0.01401f, -0.04889f, -0.00658f, -0.02483f, 0.03665f, 0.06404f, -0.06240f, -0.06096f, -0.04700f, -0.02346f, 0.00138f, 0.06925f, -0.01019f, -0.00176f, -0.02544f, 0.02960f, 0.02050f, 0.03947f, -0.00272f, 0.00468f, -0.02602f, -0.01730f, 0.00405f, 0.05192f, -0.02064f, -0.02716f, 0.00410f, -0.01948f, 0.00795f, 0.01830f, -0.04489f, 0.05440f, 0.02118f, 0.08689f, 0.02591f, -0.03586f, 0.01519f, -0.00369f, -0.06709f, 0.06750f, 0.08401f, -0.04886f, -0.02261f, -0.04083f, -0.08490f, -0.01632f, 0.01531f, -0.01121f, -0.08360f, -0.04338f, -0.07983f, -0.00643f, -0.03743f, 0.00960f, 0.02475f, -0.03592f, 0.05575f, -0.01748f, 0.02354f, -0.01353f, -0.04720f, 0.00312f, 0.03751f, -0.11815f, 0.00213f, -0.04458f, 0.02141f, -0.05613f, -0.04672f, 0.02871f, 0.05439f, -0.00463f, 0.04076f, 0.06015f, -0.03725f, 0.00233f, -0.04285f, 0.00406f, 0.01991f, -0.05223f, -0.01124f, -0.05272f, 0.03437f, 0.05617f, 0.10479f, -0.01623f, -0.00903f, -0.09528f, 0.00047f, 0.06596f, -0.00459f, -0.00496f, -0.00030f, -0.04913f, 0.03115f, 0.01257f, -0.01506f, -0.01258f, -0.04295f, 0.00652f, -0.04742f, 0.03211f, 0.02236f, 0.01189f, -0.00949f, -0.02012f, -0.01568f, -0.04284f, -0.05287f, -0.06155f, 0.01276f, 0.00279f, 0.02418f, -0.01106f, 0.06792f, -0.04228f, 0.03973f, -0.04284f, 0.00816f, 0.02636f, -0.01280f, -0.07915f, 0.01239f, 0.05573f, -0.08332f, -0.01773f, 0.03281f, -0.02035f, 0.11939f, 0.06821f, 0.00109f, -0.06531f, 0.02520f, 0.01045f, -0.03658f, 0.01332f, -0.07385f, -0.02274f, -0.01101f, 0.05273f, -0.00197f, 0.00439f, 0.01382f, -0.01888f, 0.06335f, -0.01562f, -0.03152f, 0.00758f, -0.01929f, 0.00111f, 0.01683f, -0.06337f, -0.01427f, -0.05887f, 0.08988f, -0.02906f, -0.04996f, -0.05978f, 0.08087f, -0.04815f, 0.02303f, 0.01857f, -0.02266f, 0.06232f, 0.03156f, -0.00897f, -0.06995f, 0.11362f, 0.00511f, 0.05869f, 0.01659f, -0.02589f, 0.02955f, 0.04012f, 0.06196f, 0.04441f, 0.03986f, 0.01958f, 0.00671f, 0.03879f, 0.00863f, -0.03607f, 0.00262f, 0.02297f, 0.00660f, -0.00653f, -0.06453f, -0.00124f, 0.03860f, -0.01740f, 0.03716f, 0.06966f, -0.03530f, -0.04357f, -0.05856f, 0.06868f, -0.03491f, 0.05199f, 0.00128f, 0.07122f, 0.00463f, -0.02707f, -0.04913f, -0.04800f, -0.02925f, -0.02888f, -0.01746f, 0.11131f, 0.02402f, -0.00779f, -0.05793f, -0.06813f, -0.01832f, 0.07645f, 0.01103f, 0.00262f, 0.03143f, -0.01320f, 0.09793f, 0.06031f, 0.04580f, -0.00016f, 0.02601f, 0.00115f, -0.02644f, 0.06130f, -0.00134f, -0.03331f, 0.06243f, 0.00189f, -0.06339f, -0.01341f, -0.04303f, 0.04106f, 0.00629f, -0.02013f, 0.05585f, 0.05151f, -0.01007f, 0.05242f, -0.09781f, -0.01444f, -0.02149f, 0.01825f, -0.04177f, -0.00050f, -0.00440f, -0.08068f, 0.01870f, -0.01062f, -0.07962f, -0.06239f, 0.03902f, -0.02622f, -0.08390f, 0.05073f, -0.06480f, -0.07976f, -0.00997f, -0.02067f, 0.04813f, -0.00136f, -0.04523f, -0.01367f, -0.02044f, -0.03919f, -0.01505f, -0.09735f, 0.00646f, -0.03765f, 0.02247f, 0.03519f, 0.00289f, -0.04820f, 0.00189f, -0.01781f, -0.00652f, -0.02543f, 0.03713f, 0.01245f, -0.01644f, -0.06604f, 0.02978f, -0.02926f, 0.01535f, 0.04982f, 0.04162f, -0.09353f, 0.00912f, 0.02365f, 0.05024f, -0.00205f, 0.02767f, 0.01811f, -0.10075f, 0.00469f, 0.07830f, -0.00731f, 0.08298f, -0.01497f, -0.08329f
        });

        // Get distance an compare to threshold (< 1)
        index_match = 0;
        for (int i = 0; i < personArray.length; i++) {
            person_distance = calculateDistance(new_face_embedding, personArray[i].getEmbedding());

            if (person_distance < 1) {
                match_names[index_match] = personArray[i].getName();
                index_match = index_match+1;
            }
        }

        // Display on ListView
        ArrayAdapter adapter = new ArrayAdapter<String>(this, R.layout.match_list, match_names);
        listView.setAdapter(adapter);
    }

    private double calculateDistance(float[] a, float[] b) {
        double diff_square_sum = 0;
        for (int i = 0; i < a.length; i++) {
            diff_square_sum += (a[i] - b[i]) * (a[i] - b[i]);
        }
        return Math.sqrt(diff_square_sum);
    }
}